package component:webgpu;


interface webgpu {
  use graphics-context.{graphics-context, buffer};

  request-adapter: func() -> gpu-adapter;

  record gpu-shader-module-descriptor {
    label: option<string>,
    code: string,
  }
  resource gpu-shader-module {}
  record gpu-vertex-state {
    module: gpu-shader-module,
    entry-point: string,
  }
  enum gpu-texture-format {
    bgra8-unorm-srgb,
  }
  record gpu-fragment-state {
    module: gpu-shader-module,
    entry-point: string,
    targets: list<gpu-texture-format>
  }
  enum gpu-primitive-topology {
    point-list,
    line-list,
    line-strip,
    triangle-list,
    triangle-strip,
  }
  record gpu-primitive-state {
    topology: gpu-primitive-topology
  }
  record gpu-render-pipeline-descriptor {
    // layout: some(&pipeline_layout),
    vertex: gpu-vertex-state,
    fragment: gpu-fragment-state,
    primitive: gpu-primitive-state,
  }
  resource gpu-render-pipeline {}
  resource gpu-adapter {
    request-device: func() -> gpu-device;
  }
  resource gpu-command-buffer {

  }
  resource gpu-device-queue {
    submit: func(val: list<gpu-command-buffer>);
  }

  resource gpu-device {
    connect-graphics-context: func(context: borrow<graphics-context>);
    create-command-encoder: func() -> gpu-command-encoder;
    create-shader-module: func(desc: gpu-shader-module-descriptor) -> gpu-shader-module;
    create-render-pipeline: func(props: gpu-render-pipeline-descriptor) -> gpu-render-pipeline;
    queue: func() -> gpu-device-queue;
  }

  record gpu-color-attachment {
    view: borrow<gpu-texture-view>,
  }
  record gpu-render-pass-descriptor {
    label: string,
    color-attachments: list<gpu-color-attachment>,
  }
  resource gpu-command-encoder {
    begin-render-pass: func(desc: gpu-render-pass-descriptor) -> gpu-render-pass;
    // https://github.com/WebAssembly/component-model/issues/226#issuecomment-1751966154
    finish: static func(self: gpu-command-encoder) -> gpu-command-buffer;
  }
  resource gpu-render-pass {
    set-pipeline: func(pipeline: gpu-render-pipeline);
    draw: func(count: u32);
    end: func();
  }

  resource gpu-texture {
    from-graphics-buffer: static func(buffer: buffer) -> gpu-texture;
    create-view: func() -> gpu-texture-view;
    non-standard-present: static func(this: gpu-texture);
  }
  resource gpu-texture-view {
  }
}
